페이지 네이션 작업순서

1. 작업환경 구축(app,post,postlist,pagination)

2. postlist 컴포넌트에서 map을 통해서 리스트 형성(10개),게시물이 모두 출력되는지 확인.. (css 작성. post,postlist)

3. pagination 컴포넌트 (페이지번호.. 1~??).. 끝페이지 번호는 데이터의 개수에 따라 변경.. 
- 페이지 번호 계산.. (데이터 전체 개수(JSON배열의 길이.), 페이지당 데이터 개수(this.state.postperpage) )
- 정보들을 pagination컴포넌트로 넘김.. 
- 페이지네이션 박스 및 번호를 넣기위한 배열 생성후 첫번째 인덱스부터 마지막 인덱스까지 push로 넣어줌.. 
- 매핑을 통해서 onclick(현재 페이지 설정_추후에 생성) 기능이 있는 span태그 생성.. 
- 해당 페이지네이션 박스를 위한 css .page 생성.. 
- 데이터 개수를 변화시켜 제대로 동작하는지 확인.. 
- setCurrentpage 생성.. 페이지 누르면 누른 페이지 번호가 떠야함.. 그렇기 때문에 this.setcurrentpage(data)형으로 
- 단 this.setcurrentpage(data) 로 해버리면 자동 실행이 되므로 ()=>this.setcurrentpage(data) 바로 반환하는 형태로 바꾸어서 
생성.  함수 호출 vs 함수 전달 개념.. 
- 클릭한 페이지 번호를 메인으로 넘겨서 그 넘긴 페이지 번호를 이용해 배열을 slice (ex. slice(0,3) > 0,1,2)내장함수를 활용해 출력되게 함.. 

4. app.js 현재페이지정보, 현재페이지 설정함수 만들기.. 

5. 페이지네이션에서 페이지 번호 클릭시 그 페이지 번호 app.js로 넘김.  

6. app.js 가 넘겨받은 페이지 번호를 setstate를 통해 현재 페이지로 설정.. 
- postlist 컴포넌트에 currentpostlist 함수 적용.. postlist={this.state.currentpostlist}
- currentpage 함수 동작수순 정리.. 



코드 
app.js

import './App.css';
import { Component } from 'react';
import PostList from './components/PostList.js';
import PagiNation from './components/PagiNation.js';

class App extends Component {

  constructor(props){
    super(props)
    this.state={
        postList:[
          {no:10,title:'title-10', contents:'contents-10',author:'kim10' , writedate:'2022-08-30'},
          {no:9,title:'title-9', contents:'contents-9', author:'kim9' , writedate:'2022-08-30'},
          {no:8,title:'title-8', contents:'contents-8', author:'kim8' , writedate:'2022-08-30'},
          {no:7,title:'title-7', contents:'contents-7', author:'kim7' , writedate:'2022-08-30'},
          {no:6,title:'title-6', contents:'contents-6', author:'kim6' , writedate:'2022-08-30'},
          {no:5,title:'title-5', contents:'contents-5', author:'kim5' , writedate:'2022-08-30'},
          {no:4,title:'title-4', contents:'contents-4', author:'kim4' , writedate:'2022-08-30'},
          {no:3,title:'title-3', contents:'contents-3', author:'kim3' , writedate:'2022-08-30'},
          {no:2,title:'title-2', contents:'contents-2', author:'kim2' , writedate:'2022-08-30'},
          {no:1,title:'title-1', contents:'contents-1', author:'kim1' , writedate:'2022-08-30'}        ],
        postListPerPage:3,
        currentPage:1
    }
  }

  setCurrentPage=(page)=>{
    alert("페이지설정(App.js):"+page)
    this.setState({
      currentPage:page
    })
    //PagiNation컴포넌트에서 클릭된 
    //페이지번호를 넘겨받아서
    //현재 페이지 번호로 설정한다.
  }

  currentPostList=(postList)=>{
    //slice 메서드 (배열 추출)
    const {currentPage,postListPerPage}=this.state
    //
    const indexOfLast = currentPage*postListPerPage
    const indexOfFirst = indexOfLast-postListPerPage
    const slicePostList=postList.slice(indexOfFirst,indexOfLast)
    return slicePostList;
  }
  

  render(){
    const {postList,postListPerPage,currentPage}=this.state
    return (
      <div id='app'>
          <PostList postList={this.currentPostList(postList)}/>
          <PagiNation postListLength={postList.length}
          postListPerPage={postListPerPage} 
          currentPage={currentPage}
          setCurrentPage={this.setCurrentPage}/>
      </div>
    );
  }
}

export default App;


pagination.js


import '../css/PagiNation.css';
import { Component } from 'react';

class PagiNation extends Component {

  constructor(props){
    super(props)
    this.state={
      
    }
  }

  setCurrentPage=(page)=>{
    //alert("페이지번호 클릭됨!")
    alert(page+"페이지 클릭!")
    this.props.setCurrentPage(page)
    //App.js의 setCurrentPage함수
  }

  prevPage=()=>{
    const {currentPage,setCurrentPage} = this.props
    if(currentPage === 1){
      alert('이동불가!')
      return 
    }
    else{
      const prevPage = currentPage - 1 
      setCurrentPage(prevPage)
    }
  }

  nextPage=()=>{
    const {currentPage,setCurrentPage,postListLength,postListPerPage} = this.props
    const endIndex = Math.ceil(postListLength/postListPerPage)
    if( currentPage === endIndex){
      alert('이동불가!')
      return 
    }
    else{
      const nextPage = currentPage + 1
      setCurrentPage(nextPage)
    }
  }

  render(){

    const {postListLength,postListPerPage}=this.props
    //10,3
    //3,3,3,1 - 1페이지~4페이지, 10/3 -> 3.33 -> 4
    let pageNumbers=[];//페이지 번호가 들어갈 배열
    console.log(postListLength)//10
    console.log(postListPerPage)//3
    const lastPageNum=Math.ceil(postListLength/postListPerPage)//4
    for(var i=1; i<=lastPageNum; i++){//1~4
      pageNumbers.push(i)//1,2,3,4
    }
    console.log(pageNumbers)//[1,2,3,4]

    const pageList=pageNumbers.map(
      (data)=>(<span className='page' key={data}
      onClick={()=>this.setCurrentPage(data)}>{data}</span>)
    )
    //this.setCurrentPage(data)

    return (  
      <div id='pagination'>
          <div>
            총 글 갯수:{postListLength}
          </div>
          <div>
            페이지당 글 갯수:{postListPerPage}
          </div>
          <div>
            <button onClick={this.prevPage}>prev</button>
            {pageList}
            <button onClick={this.nextPage}>next</button>
          </div>
      </div>
    );
  }
}

export default PagiNation;

post.js


import '../css/Post.css';
import { Component } from 'react';

class Post extends Component {

  constructor(props){
    super(props)
    this.state={
      
    }
  }

  render(){
    return (
      <div id='post'>
            <span>
                {this.props.no}
            </span>
            <span>
                {this.props.title}
            </span>
            <span>
                {this.props.contents}
            </span>
            <span>
                {this.props.author}
            </span>
            <span>
                {this.props.writedate}
            </span>
      </div>
    );
  }
}

export default Post;

post.css


#post{
    width:90%;
    height:50px;
    background-color: chartreuse;
    margin:10px;
}

#post > span:first-child{
    display: inline-block;
    width: 10%;

    background-color: aqua;
    text-align: center;
}

#post > span:nth-child(2){
    display: inline-block;
    width: 20%;

    background-color: brown;
    text-align: center;
}

#post > span:nth-child(3){
    display: inline-block;
    width: 30%;

    background-color: green;
    text-align: center;
}

#post > span:nth-child(4){
    display: inline-block;
    width: 10%;

    background-color: purple;
    text-align: center;
}

#post > span:last-child{
    display: inline-block;
    width: 30%;
    background-color: yellow;
    text-align: center;
}

pagination.css


#pagination{
    width:90%;
    height:100px;
    background-color: brown;
}


#pagination>div:first-child{
    background-color: darkkhaki;
}
#pagination>div:nth-child(2){
    background-color: darkmagenta;
}
#pagination>div:nth-child(3){
    background-color: darkolivegreen;
}

.page{
    display:inline-block;
    width:35px;
    height:35px;
    border:1px solid black;
    margin:5px;
    text-align: center;
    padding-top:5px;
    box-sizing: border-box;
    background-color: darkgray;
}

 