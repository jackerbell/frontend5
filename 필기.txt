App.js
import React, { Component } from 'react';
import Movie from './components/Movie';
import InputComp from './components/InputComp';
import './App.css'

class App extends Component {
  constructor(props){
    super(props)
    this.state={
      movieList:[
        {name:'한산:용의 출현',director:'김현민',runningTime:130,rating:8.5},
        {name:'헌트',director:'이정재',runningTime:125,rating:8.7},
        {name:'탑건:매버릭',director:'조셉 코신스키',runningTime:130,rating:9.4}
      ]
    }
  }

  addMovieInfo = (name,director,runningTime,rating) => {
    alert('추가!(App.js)')
    alert('추가할 영화제목(App.js):' + name)
    alert('추가할 감독명(App.js):' + director)
    alert('추가할 상영시간(App.js):' + runningTime)
    alert('추가할 평점(App.js):' + rating)
    const movieObj = {name:name,director:director,runningTime:runningTime,rating:rating}
    this.setState({
      movieList:this.state.movieList.concat(movieObj)
    })
  }

  deleteMovie = (name,director,rating,runningTime) => { // 자식 컴포넌트에서는 this.props~로 넘겨준 요소를 넣어주면됨..
    alert('삭제! (App.js)')
    alert('삭제할 영화제목:'+name) //이 때 부모요소에서 불러옴
    const filteredList = this.state.movieList.filter(
      (data) => ((data.name !== name) && (data.runningTime 
        !== runningTime) && (data.rating !== rating) && 
        (data.director !== director)  )
    )
    this.setState({
      movieList : filteredList
    })
  }

  updateMovie = (name,runningTime) => {
    alert('수정! (App.js)')
    alert('수정할 영화 제목:'+name)
    alert('수정할 상영 시간:'+runningTime)
    const updateMovieList = this.state.movieList.map(
      (data) => (data.name === name) ? ({...data, runningTime:runningTime}):data
    )
    this.setState({
      movieList:updateMovieList
    })
  }

  render() {
    const result = this.state.movieList.map(
      (data) => (<Movie key={data.name + `${data.name}`} name={data.name} director={data.director} runningTime={data.runningTime} rating={data.rating}
      deleteMovie={this.deleteMovie}
      updateMovie={this.updateMovie}/>)
    )
    return (
      <div id='App'>   
        <InputComp addMovieInfo={this.addMovieInfo}/> 
        {result}
      </div>
    );
  }
}

export default App;
Movie.js
import React, { Component } from 'react';
import '../css/Movie.css'

class Movie extends Component {
    constructor(props){
        super(props)
        this.state={
            edit:false,
            runningTime:this.props.runningTime,
            director:this.props.director,
            name:this.props.name,
            rating:this.props.rating
        }
    }

    deleteMovie = () => {
        alert('삭제! (Moive.js)')
        alert('삭제할 영화제목:'+this.props.name) //이 때 부모요소에서 불러옴
        this.props.deleteMovie(this.props.name,this.props.director,this.props.rating,this.props.runningTime)
    }

    updateMovie = () => {
        alert('수정! (Movie.js)')
        const {edit,runningTime}=this.state
        const {name} = this.props
        if(edit === true){
            this.props.updateMovie(name,runningTime)
        }
        this.setState({
            edit:!this.state.edit
        })
    }

    runningTimeChange = (e) => {
        console.log(e.target.value)
        this.setState({
            runningTime:e.target.value
        })
    }

    render() {
        const {edit} = this.state
        if(edit===false){
            return (
                <div id='wrap1'>
                    <div>
                        제목:{this.props.name}
                    </div>
                    <div>
                        감독:{this.props.director}
                    </div>
                    <div>
                        시간:{this.props.runningTime}
                    </div>
                    <div>
                        평점:{this.props.rating}
                    </div>
                    <button onClick={this.updateMovie}>수정</button>
                    <button onClick={this.deleteMovie}>삭제</button>
                </div>
            );
        }
        else{
            return (
                <div id='wrap1'>
                    <div>
                        제목:{this.props.name}
                    </div>
                    <div>
                        감독:{this.props.director}
                    </div>
                    <div>
                        시간:<input type='text' defaultValue={this.props.runningTime} 
                        onChange={this.runningTimeChange}/>
                    </div>
                    <div>
                        평점:{this.props.rating}
                    </div>
                    <button onClick={this.updateMovie}>수정</button>
                    <button onClick={this.deleteMovie}>삭제</button>
                </div>
            );
        }
    }
}

export default Movie;

Movie.css
#wrap1{
    width: 1000px;
    height: 140px;
    background-color: rgb(72, 139, 117);
    margin-top: 10px;
}


InputComp.js
import React, { Component } from 'react';
import '../css/InputComp.css'

class InputComp extends Component {
    constructor(props){
        super(props)
        this.state={
            name:'',
            director:'',
            runningTime:'',
            rating:''
        }
    }

    addMovieInfo = () => {
        alert('추가!(addMovieInfo.js)')
        const {name,director,runningTime,rating} = this.state
        alert('추가할 영화제목(addMovieInfo.js):' + name)
        alert('추가할 감독명(addMovieInfo.js):' + director)
        alert('추가할 상영시간(addMovieInfo.js):' + runningTime)
        alert('추가할 평점(addMovieInfo.js):' + rating)

        this.props.addMovieInfo(name,director,runningTime,rating)
    }

    nameChange = (e) => {
        console.log(e.target.value)
        this.setState({
            name:e.target.value
        })
    }

    directorChange = (e) => {
        this.setState({
            director:e.target.value
        })
    }

    runningTimeChange = (e) => {
        this.setState({
            runningTime:e.target.value
        })
    }
    ratingChange = (e) => {
        this.setState({
            rating:e.target.value
        })
    }
    render() {
        return (
            <div id='wrap2'>
                <input type="text" onChange={this.nameChange} placeholder='영화제목'/>
                <input type="text" onChange={this.directorChange} placeholder='감독'/>
                <input type="text" onChange={this.runningTimeChange} placeholder='러닝타임'/>
                <input type="text" onChange={this.ratingChange} placeholder='평점'/>
                <button onClick={this.addMovieInfo}>추가</button>
            </div>
        );
    }
}

export default InputComp;

InputComp.css
#wrap2{
    width: 1000px;
    height: 100px;
    background-color: rgb(94, 62, 123);   
    text-align: center; 
}

APP.css
body{
  width: 100vw;
  height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
}

#App{
  width: 1000px;
  height: 900px;
  background-color: rgb(152, 116, 73);
}

input{
    height: 22px;
}

button{
    height: 22px;
}




inputComp 추가 함수 
인풋컴포넌트 내부에 해당 기능의 함수 추가 
해당 버튼 내부에 해당 함수를 온클릭 이벤트로 연결 
메인 함수에 해당 함수 추가 및 연동
메인 함수의 렌더 부분에 최종적으로 해당 함수를 ex) addMovieInfo = {this.addMovieInfo} 형식으로 넣어주면 통과 